"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@tauri-apps";
exports.ids = ["vendor-chunks/@tauri-apps"];
exports.modules = {

/***/ "(ssr)/./node_modules/@tauri-apps/api/app.js":
/*!*********************************************!*\
  !*** ./node_modules/@tauri-apps/api/app.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defaultWindowIcon: () => (/* binding */ defaultWindowIcon),\n/* harmony export */   fetchDataStoreIdentifiers: () => (/* binding */ fetchDataStoreIdentifiers),\n/* harmony export */   getIdentifier: () => (/* binding */ getIdentifier),\n/* harmony export */   getName: () => (/* binding */ getName),\n/* harmony export */   getTauriVersion: () => (/* binding */ getTauriVersion),\n/* harmony export */   getVersion: () => (/* binding */ getVersion),\n/* harmony export */   hide: () => (/* binding */ hide),\n/* harmony export */   removeDataStore: () => (/* binding */ removeDataStore),\n/* harmony export */   setDockVisibility: () => (/* binding */ setDockVisibility),\n/* harmony export */   setTheme: () => (/* binding */ setTheme),\n/* harmony export */   show: () => (/* binding */ show)\n/* harmony export */ });\n/* harmony import */ var _core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core.js */ \"(ssr)/./node_modules/@tauri-apps/api/core.js\");\n/* harmony import */ var _image_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./image.js */ \"(ssr)/./node_modules/@tauri-apps/api/image.js\");\n\n\n\n// Copyright 2019-2024 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * Application metadata and related APIs.\n *\n * @module\n */\n/**\n * Gets the application version.\n * @example\n * ```typescript\n * import { getVersion } from '@tauri-apps/api/app';\n * const appVersion = await getVersion();\n * ```\n *\n * @since 1.0.0\n */\nasync function getVersion() {\n    return (0,_core_js__WEBPACK_IMPORTED_MODULE_0__.invoke)('plugin:app|version');\n}\n/**\n * Gets the application name.\n * @example\n * ```typescript\n * import { getName } from '@tauri-apps/api/app';\n * const appName = await getName();\n * ```\n *\n * @since 1.0.0\n */\nasync function getName() {\n    return (0,_core_js__WEBPACK_IMPORTED_MODULE_0__.invoke)('plugin:app|name');\n}\n/**\n * Gets the Tauri version.\n *\n * @example\n * ```typescript\n * import { getTauriVersion } from '@tauri-apps/api/app';\n * const tauriVersion = await getTauriVersion();\n * ```\n *\n * @since 1.0.0\n */\nasync function getTauriVersion() {\n    return (0,_core_js__WEBPACK_IMPORTED_MODULE_0__.invoke)('plugin:app|tauri_version');\n}\n/**\n * Gets the application identifier.\n * @example\n * ```typescript\n * import { getIdentifier } from '@tauri-apps/api/app';\n * const identifier = await getIdentifier();\n * ```\n *\n * @returns The application identifier as configured in `tauri.conf.json`.\n *\n * @since 2.4.0\n */\nasync function getIdentifier() {\n    return (0,_core_js__WEBPACK_IMPORTED_MODULE_0__.invoke)('plugin:app|identifier');\n}\n/**\n * Shows the application on macOS. This function does not automatically focus any specific app window.\n *\n * @example\n * ```typescript\n * import { show } from '@tauri-apps/api/app';\n * await show();\n * ```\n *\n * @since 1.2.0\n */\nasync function show() {\n    return (0,_core_js__WEBPACK_IMPORTED_MODULE_0__.invoke)('plugin:app|app_show');\n}\n/**\n * Hides the application on macOS.\n *\n * @example\n * ```typescript\n * import { hide } from '@tauri-apps/api/app';\n * await hide();\n * ```\n *\n * @since 1.2.0\n */\nasync function hide() {\n    return (0,_core_js__WEBPACK_IMPORTED_MODULE_0__.invoke)('plugin:app|app_hide');\n}\n/**\n * Fetches the data store identifiers on macOS and iOS.\n *\n * See https://developer.apple.com/documentation/webkit/wkwebsitedatastore for more information.\n *\n * @example\n * ```typescript\n * import { fetchDataStoreIdentifiers } from '@tauri-apps/api/app';\n * const ids = await fetchDataStoreIdentifiers();\n * ```\n *\n * @since 2.4.0\n */\nasync function fetchDataStoreIdentifiers() {\n    return (0,_core_js__WEBPACK_IMPORTED_MODULE_0__.invoke)('plugin:app|fetch_data_store_identifiers');\n}\n/**\n * Removes the data store with the given identifier.\n *\n * Note that any webview using this data store should be closed before running this API.\n *\n * See https://developer.apple.com/documentation/webkit/wkwebsitedatastore for more information.\n *\n * @example\n * ```typescript\n * import { fetchDataStoreIdentifiers, removeDataStore } from '@tauri-apps/api/app';\n * for (const id of (await fetchDataStoreIdentifiers())) {\n *  await removeDataStore(id);\n * }\n * ```\n *\n * @since 2.4.0\n */\nasync function removeDataStore(uuid) {\n    return (0,_core_js__WEBPACK_IMPORTED_MODULE_0__.invoke)('plugin:app|remove_data_store', { uuid });\n}\n/**\n * Get the default window icon.\n *\n * @example\n * ```typescript\n * import { defaultWindowIcon } from '@tauri-apps/api/app';\n * await defaultWindowIcon();\n * ```\n *\n * @since 2.0.0\n */\nasync function defaultWindowIcon() {\n    return (0,_core_js__WEBPACK_IMPORTED_MODULE_0__.invoke)('plugin:app|default_window_icon').then((rid) => rid ? new _image_js__WEBPACK_IMPORTED_MODULE_1__.Image(rid) : null);\n}\n/**\n * Set app's theme, pass in `null` or `undefined` to follow system theme\n *\n * @example\n * ```typescript\n * import { setTheme } from '@tauri-apps/api/app';\n * await setTheme('dark');\n * ```\n *\n * #### Platform-specific\n *\n * - **iOS / Android:** Unsupported.\n *\n * @since 2.0.0\n */\nasync function setTheme(theme) {\n    return (0,_core_js__WEBPACK_IMPORTED_MODULE_0__.invoke)('plugin:app|set_app_theme', { theme });\n}\n/**\n * Sets the dock visibility for the application on macOS.\n *\n * @param visible whether the dock should be visible or not\n * @since 2.5.0\n */\nasync function setDockVisibility(visible) {\n    return (0,_core_js__WEBPACK_IMPORTED_MODULE_0__.invoke)('plugin:app|set_dock_visibility', { visible });\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRhdXJpLWFwcHMvYXBpL2FwcC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBQW1DO0FBQ0E7O0FBRW5DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksYUFBYTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGdEQUFNO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLFVBQVU7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxnREFBTTtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLGtCQUFrQjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGdEQUFNO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLGdCQUFnQjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxnREFBTTtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLE9BQU87QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxnREFBTTtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLE9BQU87QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxnREFBTTtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSw0QkFBNEI7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxnREFBTTtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksNkNBQTZDO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGdEQUFNLG1DQUFtQyxNQUFNO0FBQzFEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksb0JBQW9CO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsZ0RBQU0sMkRBQTJELDRDQUFLO0FBQ2pGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksV0FBVztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsZ0RBQU0sK0JBQStCLE9BQU87QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsZ0RBQU0scUNBQXFDLFNBQVM7QUFDL0Q7O0FBRXVLIiwic291cmNlcyI6WyIvVXNlcnMvc2hlZXB6aGFvL1dvcmtTcGFjZS9jb2RlLWdlbi9ub2RlX21vZHVsZXMvQHRhdXJpLWFwcHMvYXBpL2FwcC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpbnZva2UgfSBmcm9tICcuL2NvcmUuanMnO1xuaW1wb3J0IHsgSW1hZ2UgfSBmcm9tICcuL2ltYWdlLmpzJztcblxuLy8gQ29weXJpZ2h0IDIwMTktMjAyNCBUYXVyaSBQcm9ncmFtbWUgd2l0aGluIFRoZSBDb21tb25zIENvbnNlcnZhbmN5XG4vLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IE1JVFxuLyoqXG4gKiBBcHBsaWNhdGlvbiBtZXRhZGF0YSBhbmQgcmVsYXRlZCBBUElzLlxuICpcbiAqIEBtb2R1bGVcbiAqL1xuLyoqXG4gKiBHZXRzIHRoZSBhcHBsaWNhdGlvbiB2ZXJzaW9uLlxuICogQGV4YW1wbGVcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IGdldFZlcnNpb24gfSBmcm9tICdAdGF1cmktYXBwcy9hcGkvYXBwJztcbiAqIGNvbnN0IGFwcFZlcnNpb24gPSBhd2FpdCBnZXRWZXJzaW9uKCk7XG4gKiBgYGBcbiAqXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuYXN5bmMgZnVuY3Rpb24gZ2V0VmVyc2lvbigpIHtcbiAgICByZXR1cm4gaW52b2tlKCdwbHVnaW46YXBwfHZlcnNpb24nKTtcbn1cbi8qKlxuICogR2V0cyB0aGUgYXBwbGljYXRpb24gbmFtZS5cbiAqIEBleGFtcGxlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBnZXROYW1lIH0gZnJvbSAnQHRhdXJpLWFwcHMvYXBpL2FwcCc7XG4gKiBjb25zdCBhcHBOYW1lID0gYXdhaXQgZ2V0TmFtZSgpO1xuICogYGBgXG4gKlxuICogQHNpbmNlIDEuMC4wXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGdldE5hbWUoKSB7XG4gICAgcmV0dXJuIGludm9rZSgncGx1Z2luOmFwcHxuYW1lJyk7XG59XG4vKipcbiAqIEdldHMgdGhlIFRhdXJpIHZlcnNpb24uXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IGdldFRhdXJpVmVyc2lvbiB9IGZyb20gJ0B0YXVyaS1hcHBzL2FwaS9hcHAnO1xuICogY29uc3QgdGF1cmlWZXJzaW9uID0gYXdhaXQgZ2V0VGF1cmlWZXJzaW9uKCk7XG4gKiBgYGBcbiAqXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuYXN5bmMgZnVuY3Rpb24gZ2V0VGF1cmlWZXJzaW9uKCkge1xuICAgIHJldHVybiBpbnZva2UoJ3BsdWdpbjphcHB8dGF1cmlfdmVyc2lvbicpO1xufVxuLyoqXG4gKiBHZXRzIHRoZSBhcHBsaWNhdGlvbiBpZGVudGlmaWVyLlxuICogQGV4YW1wbGVcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IGdldElkZW50aWZpZXIgfSBmcm9tICdAdGF1cmktYXBwcy9hcGkvYXBwJztcbiAqIGNvbnN0IGlkZW50aWZpZXIgPSBhd2FpdCBnZXRJZGVudGlmaWVyKCk7XG4gKiBgYGBcbiAqXG4gKiBAcmV0dXJucyBUaGUgYXBwbGljYXRpb24gaWRlbnRpZmllciBhcyBjb25maWd1cmVkIGluIGB0YXVyaS5jb25mLmpzb25gLlxuICpcbiAqIEBzaW5jZSAyLjQuMFxuICovXG5hc3luYyBmdW5jdGlvbiBnZXRJZGVudGlmaWVyKCkge1xuICAgIHJldHVybiBpbnZva2UoJ3BsdWdpbjphcHB8aWRlbnRpZmllcicpO1xufVxuLyoqXG4gKiBTaG93cyB0aGUgYXBwbGljYXRpb24gb24gbWFjT1MuIFRoaXMgZnVuY3Rpb24gZG9lcyBub3QgYXV0b21hdGljYWxseSBmb2N1cyBhbnkgc3BlY2lmaWMgYXBwIHdpbmRvdy5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgc2hvdyB9IGZyb20gJ0B0YXVyaS1hcHBzL2FwaS9hcHAnO1xuICogYXdhaXQgc2hvdygpO1xuICogYGBgXG4gKlxuICogQHNpbmNlIDEuMi4wXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIHNob3coKSB7XG4gICAgcmV0dXJuIGludm9rZSgncGx1Z2luOmFwcHxhcHBfc2hvdycpO1xufVxuLyoqXG4gKiBIaWRlcyB0aGUgYXBwbGljYXRpb24gb24gbWFjT1MuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IGhpZGUgfSBmcm9tICdAdGF1cmktYXBwcy9hcGkvYXBwJztcbiAqIGF3YWl0IGhpZGUoKTtcbiAqIGBgYFxuICpcbiAqIEBzaW5jZSAxLjIuMFxuICovXG5hc3luYyBmdW5jdGlvbiBoaWRlKCkge1xuICAgIHJldHVybiBpbnZva2UoJ3BsdWdpbjphcHB8YXBwX2hpZGUnKTtcbn1cbi8qKlxuICogRmV0Y2hlcyB0aGUgZGF0YSBzdG9yZSBpZGVudGlmaWVycyBvbiBtYWNPUyBhbmQgaU9TLlxuICpcbiAqIFNlZSBodHRwczovL2RldmVsb3Blci5hcHBsZS5jb20vZG9jdW1lbnRhdGlvbi93ZWJraXQvd2t3ZWJzaXRlZGF0YXN0b3JlIGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBmZXRjaERhdGFTdG9yZUlkZW50aWZpZXJzIH0gZnJvbSAnQHRhdXJpLWFwcHMvYXBpL2FwcCc7XG4gKiBjb25zdCBpZHMgPSBhd2FpdCBmZXRjaERhdGFTdG9yZUlkZW50aWZpZXJzKCk7XG4gKiBgYGBcbiAqXG4gKiBAc2luY2UgMi40LjBcbiAqL1xuYXN5bmMgZnVuY3Rpb24gZmV0Y2hEYXRhU3RvcmVJZGVudGlmaWVycygpIHtcbiAgICByZXR1cm4gaW52b2tlKCdwbHVnaW46YXBwfGZldGNoX2RhdGFfc3RvcmVfaWRlbnRpZmllcnMnKTtcbn1cbi8qKlxuICogUmVtb3ZlcyB0aGUgZGF0YSBzdG9yZSB3aXRoIHRoZSBnaXZlbiBpZGVudGlmaWVyLlxuICpcbiAqIE5vdGUgdGhhdCBhbnkgd2VidmlldyB1c2luZyB0aGlzIGRhdGEgc3RvcmUgc2hvdWxkIGJlIGNsb3NlZCBiZWZvcmUgcnVubmluZyB0aGlzIEFQSS5cbiAqXG4gKiBTZWUgaHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2RvY3VtZW50YXRpb24vd2Via2l0L3drd2Vic2l0ZWRhdGFzdG9yZSBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgZmV0Y2hEYXRhU3RvcmVJZGVudGlmaWVycywgcmVtb3ZlRGF0YVN0b3JlIH0gZnJvbSAnQHRhdXJpLWFwcHMvYXBpL2FwcCc7XG4gKiBmb3IgKGNvbnN0IGlkIG9mIChhd2FpdCBmZXRjaERhdGFTdG9yZUlkZW50aWZpZXJzKCkpKSB7XG4gKiAgYXdhaXQgcmVtb3ZlRGF0YVN0b3JlKGlkKTtcbiAqIH1cbiAqIGBgYFxuICpcbiAqIEBzaW5jZSAyLjQuMFxuICovXG5hc3luYyBmdW5jdGlvbiByZW1vdmVEYXRhU3RvcmUodXVpZCkge1xuICAgIHJldHVybiBpbnZva2UoJ3BsdWdpbjphcHB8cmVtb3ZlX2RhdGFfc3RvcmUnLCB7IHV1aWQgfSk7XG59XG4vKipcbiAqIEdldCB0aGUgZGVmYXVsdCB3aW5kb3cgaWNvbi5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgZGVmYXVsdFdpbmRvd0ljb24gfSBmcm9tICdAdGF1cmktYXBwcy9hcGkvYXBwJztcbiAqIGF3YWl0IGRlZmF1bHRXaW5kb3dJY29uKCk7XG4gKiBgYGBcbiAqXG4gKiBAc2luY2UgMi4wLjBcbiAqL1xuYXN5bmMgZnVuY3Rpb24gZGVmYXVsdFdpbmRvd0ljb24oKSB7XG4gICAgcmV0dXJuIGludm9rZSgncGx1Z2luOmFwcHxkZWZhdWx0X3dpbmRvd19pY29uJykudGhlbigocmlkKSA9PiByaWQgPyBuZXcgSW1hZ2UocmlkKSA6IG51bGwpO1xufVxuLyoqXG4gKiBTZXQgYXBwJ3MgdGhlbWUsIHBhc3MgaW4gYG51bGxgIG9yIGB1bmRlZmluZWRgIHRvIGZvbGxvdyBzeXN0ZW0gdGhlbWVcbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgc2V0VGhlbWUgfSBmcm9tICdAdGF1cmktYXBwcy9hcGkvYXBwJztcbiAqIGF3YWl0IHNldFRoZW1lKCdkYXJrJyk7XG4gKiBgYGBcbiAqXG4gKiAjIyMjIFBsYXRmb3JtLXNwZWNpZmljXG4gKlxuICogLSAqKmlPUyAvIEFuZHJvaWQ6KiogVW5zdXBwb3J0ZWQuXG4gKlxuICogQHNpbmNlIDIuMC4wXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIHNldFRoZW1lKHRoZW1lKSB7XG4gICAgcmV0dXJuIGludm9rZSgncGx1Z2luOmFwcHxzZXRfYXBwX3RoZW1lJywgeyB0aGVtZSB9KTtcbn1cbi8qKlxuICogU2V0cyB0aGUgZG9jayB2aXNpYmlsaXR5IGZvciB0aGUgYXBwbGljYXRpb24gb24gbWFjT1MuXG4gKlxuICogQHBhcmFtIHZpc2libGUgd2hldGhlciB0aGUgZG9jayBzaG91bGQgYmUgdmlzaWJsZSBvciBub3RcbiAqIEBzaW5jZSAyLjUuMFxuICovXG5hc3luYyBmdW5jdGlvbiBzZXREb2NrVmlzaWJpbGl0eSh2aXNpYmxlKSB7XG4gICAgcmV0dXJuIGludm9rZSgncGx1Z2luOmFwcHxzZXRfZG9ja192aXNpYmlsaXR5JywgeyB2aXNpYmxlIH0pO1xufVxuXG5leHBvcnQgeyBkZWZhdWx0V2luZG93SWNvbiwgZmV0Y2hEYXRhU3RvcmVJZGVudGlmaWVycywgZ2V0SWRlbnRpZmllciwgZ2V0TmFtZSwgZ2V0VGF1cmlWZXJzaW9uLCBnZXRWZXJzaW9uLCBoaWRlLCByZW1vdmVEYXRhU3RvcmUsIHNldERvY2tWaXNpYmlsaXR5LCBzZXRUaGVtZSwgc2hvdyB9O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tauri-apps/api/app.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tauri-apps/api/core.js":
/*!**********************************************!*\
  !*** ./node_modules/@tauri-apps/api/core.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Channel: () => (/* binding */ Channel),\n/* harmony export */   PluginListener: () => (/* binding */ PluginListener),\n/* harmony export */   Resource: () => (/* binding */ Resource),\n/* harmony export */   SERIALIZE_TO_IPC_FN: () => (/* binding */ SERIALIZE_TO_IPC_FN),\n/* harmony export */   addPluginListener: () => (/* binding */ addPluginListener),\n/* harmony export */   checkPermissions: () => (/* binding */ checkPermissions),\n/* harmony export */   convertFileSrc: () => (/* binding */ convertFileSrc),\n/* harmony export */   invoke: () => (/* binding */ invoke),\n/* harmony export */   isTauri: () => (/* binding */ isTauri),\n/* harmony export */   requestPermissions: () => (/* binding */ requestPermissions),\n/* harmony export */   transformCallback: () => (/* binding */ transformCallback)\n/* harmony export */ });\n/* harmony import */ var _external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./external/tslib/tslib.es6.js */ \"(ssr)/./node_modules/@tauri-apps/api/external/tslib/tslib.es6.js\");\n\n\n// Copyright 2019-2024 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\nvar _Channel_onmessage, _Channel_nextMessageIndex, _Channel_pendingMessages, _Channel_messageEndIndex, _Resource_rid;\n/**\n * Invoke your custom commands.\n *\n * This package is also accessible with `window.__TAURI__.core` when [`app.withGlobalTauri`](https://v2.tauri.app/reference/config/#withglobaltauri) in `tauri.conf.json` is set to `true`.\n * @module\n */\n/**\n * A key to be used to implement a special function\n * on your types that define how your type should be serialized\n * when passing across the IPC.\n * @example\n * Given a type in Rust that looks like this\n * ```rs\n * #[derive(serde::Serialize, serde::Deserialize)\n * enum UserId {\n *   String(String),\n *   Number(u32),\n * }\n * ```\n * `UserId::String(\"id\")` would be serialized into `{ String: \"id\" }`\n * and so we need to pass the same structure back to Rust\n * ```ts\n * import { SERIALIZE_TO_IPC_FN } from \"@tauri-apps/api/core\"\n *\n * class UserIdString {\n *   id\n *   constructor(id) {\n *     this.id = id\n *   }\n *\n *   [SERIALIZE_TO_IPC_FN]() {\n *     return { String: this.id }\n *   }\n * }\n *\n * class UserIdNumber {\n *   id\n *   constructor(id) {\n *     this.id = id\n *   }\n *\n *   [SERIALIZE_TO_IPC_FN]() {\n *     return { Number: this.id }\n *   }\n * }\n *\n * type UserId = UserIdString | UserIdNumber\n * ```\n *\n */\n// if this value changes, make sure to update it in:\n// 1. ipc.js\n// 2. process-ipc-message-fn.js\nconst SERIALIZE_TO_IPC_FN = '__TAURI_TO_IPC_KEY__';\n/**\n * Transforms a callback function to a string identifier that can be passed to the backend.\n * The backend uses the identifier to `eval()` the callback.\n *\n * @return A unique identifier associated with the callback function.\n *\n * @since 1.0.0\n */\nfunction transformCallback(callback, once = false) {\n    return window.__TAURI_INTERNALS__.transformCallback(callback, once);\n}\nclass Channel {\n    constructor(onmessage) {\n        _Channel_onmessage.set(this, void 0);\n        // the index is used as a mechanism to preserve message order\n        _Channel_nextMessageIndex.set(this, 0);\n        _Channel_pendingMessages.set(this, []);\n        _Channel_messageEndIndex.set(this, void 0);\n        (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _Channel_onmessage, onmessage || (() => { }), \"f\");\n        this.id = transformCallback((rawMessage) => {\n            const index = rawMessage.index;\n            if ('end' in rawMessage) {\n                if (index == (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _Channel_nextMessageIndex, \"f\")) {\n                    this.cleanupCallback();\n                }\n                else {\n                    (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _Channel_messageEndIndex, index, \"f\");\n                }\n                return;\n            }\n            const message = rawMessage.message;\n            // Process the message if we're at the right order\n            if (index == (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _Channel_nextMessageIndex, \"f\")) {\n                (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _Channel_onmessage, \"f\").call(this, message);\n                (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _Channel_nextMessageIndex, (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _Channel_nextMessageIndex, \"f\") + 1, \"f\");\n                // process pending messages\n                while ((0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _Channel_nextMessageIndex, \"f\") in (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _Channel_pendingMessages, \"f\")) {\n                    const message = (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _Channel_pendingMessages, \"f\")[(0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _Channel_nextMessageIndex, \"f\")];\n                    (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _Channel_onmessage, \"f\").call(this, message);\n                    // eslint-disable-next-line @typescript-eslint/no-array-delete\n                    delete (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _Channel_pendingMessages, \"f\")[(0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _Channel_nextMessageIndex, \"f\")];\n                    (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _Channel_nextMessageIndex, (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _Channel_nextMessageIndex, \"f\") + 1, \"f\");\n                }\n                if ((0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _Channel_nextMessageIndex, \"f\") === (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _Channel_messageEndIndex, \"f\")) {\n                    this.cleanupCallback();\n                }\n            }\n            // Queue the message if we're not\n            else {\n                // eslint-disable-next-line security/detect-object-injection\n                (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _Channel_pendingMessages, \"f\")[index] = message;\n            }\n        });\n    }\n    cleanupCallback() {\n        Reflect.deleteProperty(window, `_${this.id}`);\n    }\n    set onmessage(handler) {\n        (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _Channel_onmessage, handler, \"f\");\n    }\n    get onmessage() {\n        return (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _Channel_onmessage, \"f\");\n    }\n    [(_Channel_onmessage = new WeakMap(), _Channel_nextMessageIndex = new WeakMap(), _Channel_pendingMessages = new WeakMap(), _Channel_messageEndIndex = new WeakMap(), SERIALIZE_TO_IPC_FN)]() {\n        return `__CHANNEL__:${this.id}`;\n    }\n    toJSON() {\n        // eslint-disable-next-line security/detect-object-injection\n        return this[SERIALIZE_TO_IPC_FN]();\n    }\n}\nclass PluginListener {\n    constructor(plugin, event, channelId) {\n        this.plugin = plugin;\n        this.event = event;\n        this.channelId = channelId;\n    }\n    async unregister() {\n        return invoke(`plugin:${this.plugin}|remove_listener`, {\n            event: this.event,\n            channelId: this.channelId\n        });\n    }\n}\n/**\n * Adds a listener to a plugin event.\n *\n * @returns The listener object to stop listening to the events.\n *\n * @since 2.0.0\n */\nasync function addPluginListener(plugin, event, cb) {\n    const handler = new Channel(cb);\n    return invoke(`plugin:${plugin}|registerListener`, { event, handler }).then(() => new PluginListener(plugin, event, handler.id));\n}\n/**\n * Get permission state for a plugin.\n *\n * This should be used by plugin authors to wrap their actual implementation.\n */\nasync function checkPermissions(plugin) {\n    return invoke(`plugin:${plugin}|check_permissions`);\n}\n/**\n * Request permissions.\n *\n * This should be used by plugin authors to wrap their actual implementation.\n */\nasync function requestPermissions(plugin) {\n    return invoke(`plugin:${plugin}|request_permissions`);\n}\n/**\n * Sends a message to the backend.\n * @example\n * ```typescript\n * import { invoke } from '@tauri-apps/api/core';\n * await invoke('login', { user: 'tauri', password: 'poiwe3h4r5ip3yrhtew9ty' });\n * ```\n *\n * @param cmd The command name.\n * @param args The optional arguments to pass to the command.\n * @param options The request options.\n * @return A promise resolving or rejecting to the backend response.\n *\n * @since 1.0.0\n */\nasync function invoke(cmd, args = {}, options) {\n    return window.__TAURI_INTERNALS__.invoke(cmd, args, options);\n}\n/**\n * Convert a device file path to an URL that can be loaded by the webview.\n * Note that `asset:` and `http://asset.localhost` must be added to [`app.security.csp`](https://v2.tauri.app/reference/config/#csp-1) in `tauri.conf.json`.\n * Example CSP value: `\"csp\": \"default-src 'self' ipc: http://ipc.localhost; img-src 'self' asset: http://asset.localhost\"` to use the asset protocol on image sources.\n *\n * Additionally, `\"enable\" : \"true\"` must be added to [`app.security.assetProtocol`](https://v2.tauri.app/reference/config/#assetprotocolconfig)\n * in `tauri.conf.json` and its access scope must be defined on the `scope` array on the same `assetProtocol` object.\n *\n * @param  filePath The file path.\n * @param  protocol The protocol to use. Defaults to `asset`. You only need to set this when using a custom protocol.\n * @example\n * ```typescript\n * import { appDataDir, join } from '@tauri-apps/api/path';\n * import { convertFileSrc } from '@tauri-apps/api/core';\n * const appDataDirPath = await appDataDir();\n * const filePath = await join(appDataDirPath, 'assets/video.mp4');\n * const assetUrl = convertFileSrc(filePath);\n *\n * const video = document.getElementById('my-video');\n * const source = document.createElement('source');\n * source.type = 'video/mp4';\n * source.src = assetUrl;\n * video.appendChild(source);\n * video.load();\n * ```\n *\n * @return the URL that can be used as source on the webview.\n *\n * @since 1.0.0\n */\nfunction convertFileSrc(filePath, protocol = 'asset') {\n    return window.__TAURI_INTERNALS__.convertFileSrc(filePath, protocol);\n}\n/**\n * A rust-backed resource stored through `tauri::Manager::resources_table` API.\n *\n * The resource lives in the main process and does not exist\n * in the Javascript world, and thus will not be cleaned up automatiacally\n * except on application exit. If you want to clean it up early, call {@linkcode Resource.close}\n *\n * @example\n * ```typescript\n * import { Resource, invoke } from '@tauri-apps/api/core';\n * export class DatabaseHandle extends Resource {\n *   static async open(path: string): Promise<DatabaseHandle> {\n *     const rid: number = await invoke('open_db', { path });\n *     return new DatabaseHandle(rid);\n *   }\n *\n *   async execute(sql: string): Promise<void> {\n *     await invoke('execute_sql', { rid: this.rid, sql });\n *   }\n * }\n * ```\n */\nclass Resource {\n    get rid() {\n        return (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _Resource_rid, \"f\");\n    }\n    constructor(rid) {\n        _Resource_rid.set(this, void 0);\n        (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _Resource_rid, rid, \"f\");\n    }\n    /**\n     * Destroys and cleans up this resource from memory.\n     * **You should not call any method on this object anymore and should drop any reference to it.**\n     */\n    async close() {\n        return invoke('plugin:resources|close', {\n            rid: this.rid\n        });\n    }\n}\n_Resource_rid = new WeakMap();\nfunction isTauri() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any,@typescript-eslint/no-unsafe-member-access\n    return !!(globalThis || window).isTauri;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tauri-apps/api/core.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tauri-apps/api/event.js":
/*!***********************************************!*\
  !*** ./node_modules/@tauri-apps/api/event.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TauriEvent: () => (/* binding */ TauriEvent),\n/* harmony export */   emit: () => (/* binding */ emit),\n/* harmony export */   emitTo: () => (/* binding */ emitTo),\n/* harmony export */   listen: () => (/* binding */ listen),\n/* harmony export */   once: () => (/* binding */ once)\n/* harmony export */ });\n/* harmony import */ var _core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core.js */ \"(ssr)/./node_modules/@tauri-apps/api/core.js\");\n\n\n// Copyright 2019-2024 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * The event system allows you to emit events to the backend and listen to events from it.\n *\n * This package is also accessible with `window.__TAURI__.event` when [`app.withGlobalTauri`](https://v2.tauri.app/reference/config/#withglobaltauri) in `tauri.conf.json` is set to `true`.\n * @module\n */\n/**\n * @since 1.1.0\n */\nvar TauriEvent;\n(function (TauriEvent) {\n    TauriEvent[\"WINDOW_RESIZED\"] = \"tauri://resize\";\n    TauriEvent[\"WINDOW_MOVED\"] = \"tauri://move\";\n    TauriEvent[\"WINDOW_CLOSE_REQUESTED\"] = \"tauri://close-requested\";\n    TauriEvent[\"WINDOW_DESTROYED\"] = \"tauri://destroyed\";\n    TauriEvent[\"WINDOW_FOCUS\"] = \"tauri://focus\";\n    TauriEvent[\"WINDOW_BLUR\"] = \"tauri://blur\";\n    TauriEvent[\"WINDOW_SCALE_FACTOR_CHANGED\"] = \"tauri://scale-change\";\n    TauriEvent[\"WINDOW_THEME_CHANGED\"] = \"tauri://theme-changed\";\n    TauriEvent[\"WINDOW_CREATED\"] = \"tauri://window-created\";\n    TauriEvent[\"WEBVIEW_CREATED\"] = \"tauri://webview-created\";\n    TauriEvent[\"DRAG_ENTER\"] = \"tauri://drag-enter\";\n    TauriEvent[\"DRAG_OVER\"] = \"tauri://drag-over\";\n    TauriEvent[\"DRAG_DROP\"] = \"tauri://drag-drop\";\n    TauriEvent[\"DRAG_LEAVE\"] = \"tauri://drag-leave\";\n})(TauriEvent || (TauriEvent = {}));\n/**\n * Unregister the event listener associated with the given name and id.\n *\n * @ignore\n * @param event The event name\n * @param eventId Event identifier\n * @returns\n */\nasync function _unlisten(event, eventId) {\n    await (0,_core_js__WEBPACK_IMPORTED_MODULE_0__.invoke)('plugin:event|unlisten', {\n        event,\n        eventId\n    });\n}\n/**\n * Listen to an emitted event to any {@link EventTarget|target}.\n *\n * @example\n * ```typescript\n * import { listen } from '@tauri-apps/api/event';\n * const unlisten = await listen<string>('error', (event) => {\n *   console.log(`Got error, payload: ${event.payload}`);\n * });\n *\n * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n * unlisten();\n * ```\n *\n * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n * @param handler Event handler callback.\n * @param options Event listening options.\n * @returns A promise resolving to a function to unlisten to the event.\n * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n *\n * @since 1.0.0\n */\nasync function listen(event, handler, options) {\n    var _a;\n    const target = typeof (options === null || options === void 0 ? void 0 : options.target) === 'string'\n        ? { kind: 'AnyLabel', label: options.target }\n        : ((_a = options === null || options === void 0 ? void 0 : options.target) !== null && _a !== void 0 ? _a : { kind: 'Any' });\n    return (0,_core_js__WEBPACK_IMPORTED_MODULE_0__.invoke)('plugin:event|listen', {\n        event,\n        target,\n        handler: (0,_core_js__WEBPACK_IMPORTED_MODULE_0__.transformCallback)(handler)\n    }).then((eventId) => {\n        return async () => _unlisten(event, eventId);\n    });\n}\n/**\n * Listens once to an emitted event to any {@link EventTarget|target}.\n *\n * @example\n * ```typescript\n * import { once } from '@tauri-apps/api/event';\n * interface LoadedPayload {\n *   loggedIn: boolean,\n *   token: string\n * }\n * const unlisten = await once<LoadedPayload>('loaded', (event) => {\n *   console.log(`App is loaded, loggedIn: ${event.payload.loggedIn}, token: ${event.payload.token}`);\n * });\n *\n * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n * unlisten();\n * ```\n *\n * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n * @param handler Event handler callback.\n * @param options Event listening options.\n * @returns A promise resolving to a function to unlisten to the event.\n * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n *\n * @since 1.0.0\n */\nasync function once(event, handler, options) {\n    return listen(event, (eventData) => {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        _unlisten(event, eventData.id);\n        handler(eventData);\n    }, options);\n}\n/**\n * Emits an event to all {@link EventTarget|targets}.\n *\n * @example\n * ```typescript\n * import { emit } from '@tauri-apps/api/event';\n * await emit('frontend-loaded', { loggedIn: true, token: 'authToken' });\n * ```\n *\n * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n * @param payload Event payload.\n *\n * @since 1.0.0\n */\nasync function emit(event, payload) {\n    await (0,_core_js__WEBPACK_IMPORTED_MODULE_0__.invoke)('plugin:event|emit', {\n        event,\n        payload\n    });\n}\n/**\n * Emits an event to all {@link EventTarget|targets} matching the given target.\n *\n * @example\n * ```typescript\n * import { emitTo } from '@tauri-apps/api/event';\n * await emitTo('main', 'frontend-loaded', { loggedIn: true, token: 'authToken' });\n * ```\n *\n * @param target Label of the target Window/Webview/WebviewWindow or raw {@link EventTarget} object.\n * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n * @param payload Event payload.\n *\n * @since 2.0.0\n */\nasync function emitTo(target, event, payload) {\n    const eventTarget = typeof target === 'string' ? { kind: 'AnyLabel', label: target } : target;\n    await (0,_core_js__WEBPACK_IMPORTED_MODULE_0__.invoke)('plugin:event|emit_to', {\n        target: eventTarget,\n        event,\n        payload\n    });\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tauri-apps/api/event.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tauri-apps/api/external/tslib/tslib.es6.js":
/*!******************************************************************!*\
  !*** ./node_modules/@tauri-apps/api/external/tslib/tslib.es6.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __classPrivateFieldGet: () => (/* binding */ __classPrivateFieldGet),\n/* harmony export */   __classPrivateFieldSet: () => (/* binding */ __classPrivateFieldSet)\n/* harmony export */ });\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise, SuppressedError, Symbol, Iterator */\r\n\r\n\r\nfunction __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nfunction __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n\r\ntypeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n    var e = new Error(message);\r\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRhdXJpLWFwcHMvYXBpL2V4dGVybmFsL3RzbGliL3RzbGliLmVzNi5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUUwRCIsInNvdXJjZXMiOlsiL1VzZXJzL3NoZWVwemhhby9Xb3JrU3BhY2UvY29kZS1nZW4vbm9kZV9tb2R1bGVzL0B0YXVyaS1hcHBzL2FwaS9leHRlcm5hbC90c2xpYi90c2xpYi5lczYuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5Db3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cclxuXHJcblBlcm1pc3Npb24gdG8gdXNlLCBjb3B5LCBtb2RpZnksIGFuZC9vciBkaXN0cmlidXRlIHRoaXMgc29mdHdhcmUgZm9yIGFueVxyXG5wdXJwb3NlIHdpdGggb3Igd2l0aG91dCBmZWUgaXMgaGVyZWJ5IGdyYW50ZWQuXHJcblxyXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiIEFORCBUSEUgQVVUSE9SIERJU0NMQUlNUyBBTEwgV0FSUkFOVElFUyBXSVRIXHJcblJFR0FSRCBUTyBUSElTIFNPRlRXQVJFIElOQ0xVRElORyBBTEwgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWVxyXG5BTkQgRklUTkVTUy4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUiBCRSBMSUFCTEUgRk9SIEFOWSBTUEVDSUFMLCBESVJFQ1QsXHJcbklORElSRUNULCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgT1IgQU5ZIERBTUFHRVMgV0hBVFNPRVZFUiBSRVNVTFRJTkcgRlJPTVxyXG5MT1NTIE9GIFVTRSwgREFUQSBPUiBQUk9GSVRTLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgTkVHTElHRU5DRSBPUlxyXG5PVEhFUiBUT1JUSU9VUyBBQ1RJT04sIEFSSVNJTkcgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgVVNFIE9SXHJcblBFUkZPUk1BTkNFIE9GIFRISVMgU09GVFdBUkUuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXHJcbi8qIGdsb2JhbCBSZWZsZWN0LCBQcm9taXNlLCBTdXBwcmVzc2VkRXJyb3IsIFN5bWJvbCwgSXRlcmF0b3IgKi9cclxuXHJcblxyXG5mdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHJlY2VpdmVyLCBzdGF0ZSwga2luZCwgZikge1xyXG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgZ2V0dGVyXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgcmVhZCBwcml2YXRlIG1lbWJlciBmcm9tIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XHJcbiAgICByZXR1cm4ga2luZCA9PT0gXCJtXCIgPyBmIDoga2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIpIDogZiA/IGYudmFsdWUgOiBzdGF0ZS5nZXQocmVjZWl2ZXIpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHJlY2VpdmVyLCBzdGF0ZSwgdmFsdWUsIGtpbmQsIGYpIHtcclxuICAgIGlmIChraW5kID09PSBcIm1cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgbWV0aG9kIGlzIG5vdCB3cml0YWJsZVwiKTtcclxuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIHNldHRlclwiKTtcclxuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHdyaXRlIHByaXZhdGUgbWVtYmVyIHRvIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XHJcbiAgICByZXR1cm4gKGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyLCB2YWx1ZSkgOiBmID8gZi52YWx1ZSA9IHZhbHVlIDogc3RhdGUuc2V0KHJlY2VpdmVyLCB2YWx1ZSkpLCB2YWx1ZTtcclxufVxyXG5cclxudHlwZW9mIFN1cHByZXNzZWRFcnJvciA9PT0gXCJmdW5jdGlvblwiID8gU3VwcHJlc3NlZEVycm9yIDogZnVuY3Rpb24gKGVycm9yLCBzdXBwcmVzc2VkLCBtZXNzYWdlKSB7XHJcbiAgICB2YXIgZSA9IG5ldyBFcnJvcihtZXNzYWdlKTtcclxuICAgIHJldHVybiBlLm5hbWUgPSBcIlN1cHByZXNzZWRFcnJvclwiLCBlLmVycm9yID0gZXJyb3IsIGUuc3VwcHJlc3NlZCA9IHN1cHByZXNzZWQsIGU7XHJcbn07XG5cbmV4cG9ydCB7IF9fY2xhc3NQcml2YXRlRmllbGRHZXQsIF9fY2xhc3NQcml2YXRlRmllbGRTZXQgfTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tauri-apps/api/external/tslib/tslib.es6.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tauri-apps/api/image.js":
/*!***********************************************!*\
  !*** ./node_modules/@tauri-apps/api/image.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Image: () => (/* binding */ Image),\n/* harmony export */   transformImage: () => (/* binding */ transformImage)\n/* harmony export */ });\n/* harmony import */ var _core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core.js */ \"(ssr)/./node_modules/@tauri-apps/api/core.js\");\n\n\n// Copyright 2019-2024 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/** An RGBA Image in row-major order from top to bottom. */\nclass Image extends _core_js__WEBPACK_IMPORTED_MODULE_0__.Resource {\n    /**\n     * Creates an Image from a resource ID. For internal use only.\n     *\n     * @ignore\n     */\n    constructor(rid) {\n        super(rid);\n    }\n    /** Creates a new Image using RGBA data, in row-major order from top to bottom, and with specified width and height. */\n    static async new(rgba, width, height) {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_0__.invoke)('plugin:image|new', {\n            rgba: transformImage(rgba),\n            width,\n            height\n        }).then((rid) => new Image(rid));\n    }\n    /**\n     * Creates a new image using the provided bytes by inferring the file format.\n     * If the format is known, prefer [@link Image.fromPngBytes] or [@link Image.fromIcoBytes].\n     *\n     * Only `ico` and `png` are supported (based on activated feature flag).\n     *\n     * Note that you need the `image-ico` or `image-png` Cargo features to use this API.\n     * To enable it, change your Cargo.toml file:\n     * ```toml\n     * [dependencies]\n     * tauri = { version = \"...\", features = [\"...\", \"image-png\"] }\n     * ```\n     */\n    static async fromBytes(bytes) {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_0__.invoke)('plugin:image|from_bytes', {\n            bytes: transformImage(bytes)\n        }).then((rid) => new Image(rid));\n    }\n    /**\n     * Creates a new image using the provided path.\n     *\n     * Only `ico` and `png` are supported (based on activated feature flag).\n     *\n     * Note that you need the `image-ico` or `image-png` Cargo features to use this API.\n     * To enable it, change your Cargo.toml file:\n     * ```toml\n     * [dependencies]\n     * tauri = { version = \"...\", features = [\"...\", \"image-png\"] }\n     * ```\n     */\n    static async fromPath(path) {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_0__.invoke)('plugin:image|from_path', { path }).then((rid) => new Image(rid));\n    }\n    /** Returns the RGBA data for this image, in row-major order from top to bottom.  */\n    async rgba() {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_0__.invoke)('plugin:image|rgba', {\n            rid: this.rid\n        }).then((buffer) => new Uint8Array(buffer));\n    }\n    /** Returns the size of this image.  */\n    async size() {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_0__.invoke)('plugin:image|size', { rid: this.rid });\n    }\n}\n/**\n * Transforms image from various types into a type acceptable by Rust.\n *\n * See [tauri::image::JsImage](https://docs.rs/tauri/2/tauri/image/enum.JsImage.html) for more information.\n * Note the API signature is not stable and might change.\n */\nfunction transformImage(image) {\n    const ret = image == null\n        ? null\n        : typeof image === 'string'\n            ? image\n            : image instanceof Image\n                ? image.rid\n                : image;\n    return ret;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRhdXJpLWFwcHMvYXBpL2ltYWdlLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUE2Qzs7QUFFN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsOENBQVE7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGdEQUFNO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBLGVBQWUsZ0RBQU07QUFDckI7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0EsZUFBZSxnREFBTSw2QkFBNkIsTUFBTTtBQUN4RDtBQUNBO0FBQ0E7QUFDQSxlQUFlLGdEQUFNO0FBQ3JCO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLGVBQWUsZ0RBQU0sd0JBQXdCLGVBQWU7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVpQyIsInNvdXJjZXMiOlsiL1VzZXJzL3NoZWVwemhhby9Xb3JrU3BhY2UvY29kZS1nZW4vbm9kZV9tb2R1bGVzL0B0YXVyaS1hcHBzL2FwaS9pbWFnZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZXNvdXJjZSwgaW52b2tlIH0gZnJvbSAnLi9jb3JlLmpzJztcblxuLy8gQ29weXJpZ2h0IDIwMTktMjAyNCBUYXVyaSBQcm9ncmFtbWUgd2l0aGluIFRoZSBDb21tb25zIENvbnNlcnZhbmN5XG4vLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IE1JVFxuLyoqIEFuIFJHQkEgSW1hZ2UgaW4gcm93LW1ham9yIG9yZGVyIGZyb20gdG9wIHRvIGJvdHRvbS4gKi9cbmNsYXNzIEltYWdlIGV4dGVuZHMgUmVzb3VyY2Uge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gSW1hZ2UgZnJvbSBhIHJlc291cmNlIElELiBGb3IgaW50ZXJuYWwgdXNlIG9ubHkuXG4gICAgICpcbiAgICAgKiBAaWdub3JlXG4gICAgICovXG4gICAgY29uc3RydWN0b3IocmlkKSB7XG4gICAgICAgIHN1cGVyKHJpZCk7XG4gICAgfVxuICAgIC8qKiBDcmVhdGVzIGEgbmV3IEltYWdlIHVzaW5nIFJHQkEgZGF0YSwgaW4gcm93LW1ham9yIG9yZGVyIGZyb20gdG9wIHRvIGJvdHRvbSwgYW5kIHdpdGggc3BlY2lmaWVkIHdpZHRoIGFuZCBoZWlnaHQuICovXG4gICAgc3RhdGljIGFzeW5jIG5ldyhyZ2JhLCB3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICAgIHJldHVybiBpbnZva2UoJ3BsdWdpbjppbWFnZXxuZXcnLCB7XG4gICAgICAgICAgICByZ2JhOiB0cmFuc2Zvcm1JbWFnZShyZ2JhKSxcbiAgICAgICAgICAgIHdpZHRoLFxuICAgICAgICAgICAgaGVpZ2h0XG4gICAgICAgIH0pLnRoZW4oKHJpZCkgPT4gbmV3IEltYWdlKHJpZCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGltYWdlIHVzaW5nIHRoZSBwcm92aWRlZCBieXRlcyBieSBpbmZlcnJpbmcgdGhlIGZpbGUgZm9ybWF0LlxuICAgICAqIElmIHRoZSBmb3JtYXQgaXMga25vd24sIHByZWZlciBbQGxpbmsgSW1hZ2UuZnJvbVBuZ0J5dGVzXSBvciBbQGxpbmsgSW1hZ2UuZnJvbUljb0J5dGVzXS5cbiAgICAgKlxuICAgICAqIE9ubHkgYGljb2AgYW5kIGBwbmdgIGFyZSBzdXBwb3J0ZWQgKGJhc2VkIG9uIGFjdGl2YXRlZCBmZWF0dXJlIGZsYWcpLlxuICAgICAqXG4gICAgICogTm90ZSB0aGF0IHlvdSBuZWVkIHRoZSBgaW1hZ2UtaWNvYCBvciBgaW1hZ2UtcG5nYCBDYXJnbyBmZWF0dXJlcyB0byB1c2UgdGhpcyBBUEkuXG4gICAgICogVG8gZW5hYmxlIGl0LCBjaGFuZ2UgeW91ciBDYXJnby50b21sIGZpbGU6XG4gICAgICogYGBgdG9tbFxuICAgICAqIFtkZXBlbmRlbmNpZXNdXG4gICAgICogdGF1cmkgPSB7IHZlcnNpb24gPSBcIi4uLlwiLCBmZWF0dXJlcyA9IFtcIi4uLlwiLCBcImltYWdlLXBuZ1wiXSB9XG4gICAgICogYGBgXG4gICAgICovXG4gICAgc3RhdGljIGFzeW5jIGZyb21CeXRlcyhieXRlcykge1xuICAgICAgICByZXR1cm4gaW52b2tlKCdwbHVnaW46aW1hZ2V8ZnJvbV9ieXRlcycsIHtcbiAgICAgICAgICAgIGJ5dGVzOiB0cmFuc2Zvcm1JbWFnZShieXRlcylcbiAgICAgICAgfSkudGhlbigocmlkKSA9PiBuZXcgSW1hZ2UocmlkKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgaW1hZ2UgdXNpbmcgdGhlIHByb3ZpZGVkIHBhdGguXG4gICAgICpcbiAgICAgKiBPbmx5IGBpY29gIGFuZCBgcG5nYCBhcmUgc3VwcG9ydGVkIChiYXNlZCBvbiBhY3RpdmF0ZWQgZmVhdHVyZSBmbGFnKS5cbiAgICAgKlxuICAgICAqIE5vdGUgdGhhdCB5b3UgbmVlZCB0aGUgYGltYWdlLWljb2Agb3IgYGltYWdlLXBuZ2AgQ2FyZ28gZmVhdHVyZXMgdG8gdXNlIHRoaXMgQVBJLlxuICAgICAqIFRvIGVuYWJsZSBpdCwgY2hhbmdlIHlvdXIgQ2FyZ28udG9tbCBmaWxlOlxuICAgICAqIGBgYHRvbWxcbiAgICAgKiBbZGVwZW5kZW5jaWVzXVxuICAgICAqIHRhdXJpID0geyB2ZXJzaW9uID0gXCIuLi5cIiwgZmVhdHVyZXMgPSBbXCIuLi5cIiwgXCJpbWFnZS1wbmdcIl0gfVxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIHN0YXRpYyBhc3luYyBmcm9tUGF0aChwYXRoKSB7XG4gICAgICAgIHJldHVybiBpbnZva2UoJ3BsdWdpbjppbWFnZXxmcm9tX3BhdGgnLCB7IHBhdGggfSkudGhlbigocmlkKSA9PiBuZXcgSW1hZ2UocmlkKSk7XG4gICAgfVxuICAgIC8qKiBSZXR1cm5zIHRoZSBSR0JBIGRhdGEgZm9yIHRoaXMgaW1hZ2UsIGluIHJvdy1tYWpvciBvcmRlciBmcm9tIHRvcCB0byBib3R0b20uICAqL1xuICAgIGFzeW5jIHJnYmEoKSB7XG4gICAgICAgIHJldHVybiBpbnZva2UoJ3BsdWdpbjppbWFnZXxyZ2JhJywge1xuICAgICAgICAgICAgcmlkOiB0aGlzLnJpZFxuICAgICAgICB9KS50aGVuKChidWZmZXIpID0+IG5ldyBVaW50OEFycmF5KGJ1ZmZlcikpO1xuICAgIH1cbiAgICAvKiogUmV0dXJucyB0aGUgc2l6ZSBvZiB0aGlzIGltYWdlLiAgKi9cbiAgICBhc3luYyBzaXplKCkge1xuICAgICAgICByZXR1cm4gaW52b2tlKCdwbHVnaW46aW1hZ2V8c2l6ZScsIHsgcmlkOiB0aGlzLnJpZCB9KTtcbiAgICB9XG59XG4vKipcbiAqIFRyYW5zZm9ybXMgaW1hZ2UgZnJvbSB2YXJpb3VzIHR5cGVzIGludG8gYSB0eXBlIGFjY2VwdGFibGUgYnkgUnVzdC5cbiAqXG4gKiBTZWUgW3RhdXJpOjppbWFnZTo6SnNJbWFnZV0oaHR0cHM6Ly9kb2NzLnJzL3RhdXJpLzIvdGF1cmkvaW1hZ2UvZW51bS5Kc0ltYWdlLmh0bWwpIGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICogTm90ZSB0aGUgQVBJIHNpZ25hdHVyZSBpcyBub3Qgc3RhYmxlIGFuZCBtaWdodCBjaGFuZ2UuXG4gKi9cbmZ1bmN0aW9uIHRyYW5zZm9ybUltYWdlKGltYWdlKSB7XG4gICAgY29uc3QgcmV0ID0gaW1hZ2UgPT0gbnVsbFxuICAgICAgICA/IG51bGxcbiAgICAgICAgOiB0eXBlb2YgaW1hZ2UgPT09ICdzdHJpbmcnXG4gICAgICAgICAgICA/IGltYWdlXG4gICAgICAgICAgICA6IGltYWdlIGluc3RhbmNlb2YgSW1hZ2VcbiAgICAgICAgICAgICAgICA/IGltYWdlLnJpZFxuICAgICAgICAgICAgICAgIDogaW1hZ2U7XG4gICAgcmV0dXJuIHJldDtcbn1cblxuZXhwb3J0IHsgSW1hZ2UsIHRyYW5zZm9ybUltYWdlIH07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tauri-apps/api/image.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tauri-apps/plugin-dialog/dist-js/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@tauri-apps/plugin-dialog/dist-js/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ask: () => (/* binding */ ask),\n/* harmony export */   confirm: () => (/* binding */ confirm),\n/* harmony export */   message: () => (/* binding */ message),\n/* harmony export */   open: () => (/* binding */ open),\n/* harmony export */   save: () => (/* binding */ save)\n/* harmony export */ });\n/* harmony import */ var _tauri_apps_api_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tauri-apps/api/core */ \"(ssr)/./node_modules/@tauri-apps/api/core.js\");\n\n\n// Copyright 2019-2023 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * Open a file/directory selection dialog.\n *\n * The selected paths are added to the filesystem and asset protocol scopes.\n * When security is more important than the easy of use of this API,\n * prefer writing a dedicated command instead.\n *\n * Note that the scope change is not persisted, so the values are cleared when the application is restarted.\n * You can save it to the filesystem using [tauri-plugin-persisted-scope](https://github.com/tauri-apps/tauri-plugin-persisted-scope).\n * @example\n * ```typescript\n * import { open } from '@tauri-apps/plugin-dialog';\n * // Open a selection dialog for image files\n * const selected = await open({\n *   multiple: true,\n *   filters: [{\n *     name: 'Image',\n *     extensions: ['png', 'jpeg']\n *   }]\n * });\n * if (Array.isArray(selected)) {\n *   // user selected multiple files\n * } else if (selected === null) {\n *   // user cancelled the selection\n * } else {\n *   // user selected a single file\n * }\n * ```\n *\n * @example\n * ```typescript\n * import { open } from '@tauri-apps/plugin-dialog';\n * import { appDir } from '@tauri-apps/api/path';\n * // Open a selection dialog for directories\n * const selected = await open({\n *   directory: true,\n *   multiple: true,\n *   defaultPath: await appDir(),\n * });\n * if (Array.isArray(selected)) {\n *   // user selected multiple directories\n * } else if (selected === null) {\n *   // user cancelled the selection\n * } else {\n *   // user selected a single directory\n * }\n * ```\n *\n * @returns A promise resolving to the selected path(s)\n *\n * @since 2.0.0\n */\nasync function open(options = {}) {\n    if (typeof options === 'object') {\n        Object.freeze(options);\n    }\n    return await (0,_tauri_apps_api_core__WEBPACK_IMPORTED_MODULE_0__.invoke)('plugin:dialog|open', { options });\n}\n/**\n * Open a file/directory save dialog.\n *\n * The selected path is added to the filesystem and asset protocol scopes.\n * When security is more important than the easy of use of this API,\n * prefer writing a dedicated command instead.\n *\n * Note that the scope change is not persisted, so the values are cleared when the application is restarted.\n * You can save it to the filesystem using [tauri-plugin-persisted-scope](https://github.com/tauri-apps/tauri-plugin-persisted-scope).\n * @example\n * ```typescript\n * import { save } from '@tauri-apps/plugin-dialog';\n * const filePath = await save({\n *   filters: [{\n *     name: 'Image',\n *     extensions: ['png', 'jpeg']\n *   }]\n * });\n * ```\n *\n * @returns A promise resolving to the selected path.\n *\n * @since 2.0.0\n */\nasync function save(options = {}) {\n    if (typeof options === 'object') {\n        Object.freeze(options);\n    }\n    return await (0,_tauri_apps_api_core__WEBPACK_IMPORTED_MODULE_0__.invoke)('plugin:dialog|save', { options });\n}\n/**\n * Shows a message dialog with an `Ok` button.\n * @example\n * ```typescript\n * import { message } from '@tauri-apps/plugin-dialog';\n * await message('Tauri is awesome', 'Tauri');\n * await message('File not found', { title: 'Tauri', kind: 'error' });\n * ```\n *\n * @param message The message to show.\n * @param options The dialog's options. If a string, it represents the dialog title.\n *\n * @returns A promise indicating the success or failure of the operation.\n *\n * @since 2.0.0\n *\n */\nasync function message(message, options) {\n    const opts = typeof options === 'string' ? { title: options } : options;\n    await (0,_tauri_apps_api_core__WEBPACK_IMPORTED_MODULE_0__.invoke)('plugin:dialog|message', {\n        message: message.toString(),\n        title: opts?.title?.toString(),\n        kind: opts?.kind,\n        okButtonLabel: opts?.okLabel?.toString()\n    });\n}\n/**\n * Shows a question dialog with `Yes` and `No` buttons.\n * @example\n * ```typescript\n * import { ask } from '@tauri-apps/plugin-dialog';\n * const yes = await ask('Are you sure?', 'Tauri');\n * const yes2 = await ask('This action cannot be reverted. Are you sure?', { title: 'Tauri', kind: 'warning' });\n * ```\n *\n * @param message The message to show.\n * @param options The dialog's options. If a string, it represents the dialog title.\n *\n * @returns A promise resolving to a boolean indicating whether `Yes` was clicked or not.\n *\n * @since 2.0.0\n */\nasync function ask(message, options) {\n    const opts = typeof options === 'string' ? { title: options } : options;\n    return await (0,_tauri_apps_api_core__WEBPACK_IMPORTED_MODULE_0__.invoke)('plugin:dialog|ask', {\n        message: message.toString(),\n        title: opts?.title?.toString(),\n        kind: opts?.kind,\n        yesButtonLabel: opts?.okLabel?.toString(),\n        noButtonLabel: opts?.cancelLabel?.toString()\n    });\n}\n/**\n * Shows a question dialog with `Ok` and `Cancel` buttons.\n * @example\n * ```typescript\n * import { confirm } from '@tauri-apps/plugin-dialog';\n * const confirmed = await confirm('Are you sure?', 'Tauri');\n * const confirmed2 = await confirm('This action cannot be reverted. Are you sure?', { title: 'Tauri', kind: 'warning' });\n * ```\n *\n * @param message The message to show.\n * @param options The dialog's options. If a string, it represents the dialog title.\n *\n * @returns A promise resolving to a boolean indicating whether `Ok` was clicked or not.\n *\n * @since 2.0.0\n */\nasync function confirm(message, options) {\n    const opts = typeof options === 'string' ? { title: options } : options;\n    return await (0,_tauri_apps_api_core__WEBPACK_IMPORTED_MODULE_0__.invoke)('plugin:dialog|confirm', {\n        message: message.toString(),\n        title: opts?.title?.toString(),\n        kind: opts?.kind,\n        okButtonLabel: opts?.okLabel?.toString(),\n        cancelButtonLabel: opts?.cancelLabel?.toString()\n    });\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tauri-apps/plugin-dialog/dist-js/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tauri-apps/plugin-shell/dist-js/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@tauri-apps/plugin-shell/dist-js/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Child: () => (/* binding */ Child),\n/* harmony export */   Command: () => (/* binding */ Command),\n/* harmony export */   EventEmitter: () => (/* binding */ EventEmitter),\n/* harmony export */   open: () => (/* binding */ open)\n/* harmony export */ });\n/* harmony import */ var _tauri_apps_api_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tauri-apps/api/core */ \"(ssr)/./node_modules/@tauri-apps/api/core.js\");\n\n\n// Copyright 2019-2023 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * Access the system shell.\n * Allows you to spawn child processes and manage files and URLs using their default application.\n *\n * ## Security\n *\n * This API has a scope configuration that forces you to restrict the programs and arguments that can be used.\n *\n * ### Restricting access to the {@link open | `open`} API\n *\n * On the configuration object, `open: true` means that the {@link open} API can be used with any URL,\n * as the argument is validated with the `^((mailto:\\w+)|(tel:\\w+)|(https?://\\w+)).+` regex.\n * You can change that regex by changing the boolean value to a string, e.g. `open: ^https://github.com/`.\n *\n * ### Restricting access to the {@link Command | `Command`} APIs\n *\n * The plugin permissions object has a `scope` field that defines an array of CLIs that can be used.\n * Each CLI is a configuration object `{ name: string, cmd: string, sidecar?: bool, args?: boolean | Arg[] }`.\n *\n * - `name`: the unique identifier of the command, passed to the {@link Command.create | Command.create function}.\n * If it's a sidecar, this must be the value defined on `tauri.conf.json > bundle > externalBin`.\n * - `cmd`: the program that is executed on this configuration. If it's a sidecar, this value is ignored.\n * - `sidecar`: whether the object configures a sidecar or a system program.\n * - `args`: the arguments that can be passed to the program. By default no arguments are allowed.\n *   - `true` means that any argument list is allowed.\n *   - `false` means that no arguments are allowed.\n *   - otherwise an array can be configured. Each item is either a string representing the fixed argument value\n *     or a `{ validator: string }` that defines a regex validating the argument value.\n *\n * #### Example scope configuration\n *\n * CLI: `git commit -m \"the commit message\"`\n *\n * Capability:\n * ```json\n * {\n *   \"permissions\": [\n *     {\n *       \"identifier\": \"shell:allow-execute\",\n *       \"allow\": [\n *         {\n *           \"name\": \"run-git-commit\",\n *           \"cmd\": \"git\",\n *           \"args\": [\"commit\", \"-m\", { \"validator\": \"\\\\S+\" }]\n *         }\n *       ]\n *     }\n *   ]\n * }\n * ```\n * Usage:\n * ```typescript\n * import { Command } from '@tauri-apps/plugin-shell'\n * Command.create('run-git-commit', ['commit', '-m', 'the commit message'])\n * ```\n *\n * Trying to execute any API with a program not configured on the scope results in a promise rejection due to denied access.\n *\n * @module\n */\n/**\n * @since 2.0.0\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nclass EventEmitter {\n    constructor() {\n        /** @ignore */\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-explicit-any\n        this.eventListeners = Object.create(null);\n    }\n    /**\n     * Alias for `emitter.on(eventName, listener)`.\n     *\n     * @since 2.0.0\n     */\n    addListener(eventName, listener) {\n        return this.on(eventName, listener);\n    }\n    /**\n     * Alias for `emitter.off(eventName, listener)`.\n     *\n     * @since 2.0.0\n     */\n    removeListener(eventName, listener) {\n        return this.off(eventName, listener);\n    }\n    /**\n     * Adds the `listener` function to the end of the listeners array for the\n     * event named `eventName`. No checks are made to see if the `listener` has\n     * already been added. Multiple calls passing the same combination of `eventName`and `listener` will result in the `listener` being added, and called, multiple\n     * times.\n     *\n     * Returns a reference to the `EventEmitter`, so that calls can be chained.\n     *\n     * @since 2.0.0\n     */\n    on(eventName, listener) {\n        if (eventName in this.eventListeners) {\n            // eslint-disable-next-line security/detect-object-injection\n            this.eventListeners[eventName].push(listener);\n        }\n        else {\n            // eslint-disable-next-line security/detect-object-injection\n            this.eventListeners[eventName] = [listener];\n        }\n        return this;\n    }\n    /**\n     * Adds a **one-time**`listener` function for the event named `eventName`. The\n     * next time `eventName` is triggered, this listener is removed and then invoked.\n     *\n     * Returns a reference to the `EventEmitter`, so that calls can be chained.\n     *\n     * @since 2.0.0\n     */\n    once(eventName, listener) {\n        const wrapper = (arg) => {\n            this.removeListener(eventName, wrapper);\n            listener(arg);\n        };\n        return this.addListener(eventName, wrapper);\n    }\n    /**\n     * Removes the all specified listener from the listener array for the event eventName\n     * Returns a reference to the `EventEmitter`, so that calls can be chained.\n     *\n     * @since 2.0.0\n     */\n    off(eventName, listener) {\n        if (eventName in this.eventListeners) {\n            // eslint-disable-next-line security/detect-object-injection\n            this.eventListeners[eventName] = this.eventListeners[eventName].filter((l) => l !== listener);\n        }\n        return this;\n    }\n    /**\n     * Removes all listeners, or those of the specified eventName.\n     *\n     * Returns a reference to the `EventEmitter`, so that calls can be chained.\n     *\n     * @since 2.0.0\n     */\n    removeAllListeners(event) {\n        if (event) {\n            // eslint-disable-next-line security/detect-object-injection\n            delete this.eventListeners[event];\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            this.eventListeners = Object.create(null);\n        }\n        return this;\n    }\n    /**\n     * @ignore\n     * Synchronously calls each of the listeners registered for the event named`eventName`, in the order they were registered, passing the supplied arguments\n     * to each.\n     *\n     * @returns `true` if the event had listeners, `false` otherwise.\n     *\n     * @since 2.0.0\n     */\n    emit(eventName, arg) {\n        if (eventName in this.eventListeners) {\n            // eslint-disable-next-line security/detect-object-injection\n            const listeners = this.eventListeners[eventName];\n            for (const listener of listeners)\n                listener(arg);\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Returns the number of listeners listening to the event named `eventName`.\n     *\n     * @since 2.0.0\n     */\n    listenerCount(eventName) {\n        if (eventName in this.eventListeners)\n            // eslint-disable-next-line security/detect-object-injection\n            return this.eventListeners[eventName].length;\n        return 0;\n    }\n    /**\n     * Adds the `listener` function to the _beginning_ of the listeners array for the\n     * event named `eventName`. No checks are made to see if the `listener` has\n     * already been added. Multiple calls passing the same combination of `eventName`and `listener` will result in the `listener` being added, and called, multiple\n     * times.\n     *\n     * Returns a reference to the `EventEmitter`, so that calls can be chained.\n     *\n     * @since 2.0.0\n     */\n    prependListener(eventName, listener) {\n        if (eventName in this.eventListeners) {\n            // eslint-disable-next-line security/detect-object-injection\n            this.eventListeners[eventName].unshift(listener);\n        }\n        else {\n            // eslint-disable-next-line security/detect-object-injection\n            this.eventListeners[eventName] = [listener];\n        }\n        return this;\n    }\n    /**\n     * Adds a **one-time**`listener` function for the event named `eventName` to the_beginning_ of the listeners array. The next time `eventName` is triggered, this\n     * listener is removed, and then invoked.\n     *\n     * Returns a reference to the `EventEmitter`, so that calls can be chained.\n     *\n     * @since 2.0.0\n     */\n    prependOnceListener(eventName, listener) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const wrapper = (arg) => {\n            this.removeListener(eventName, wrapper);\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n            listener(arg);\n        };\n        return this.prependListener(eventName, wrapper);\n    }\n}\n/**\n * @since 2.0.0\n */\nclass Child {\n    constructor(pid) {\n        this.pid = pid;\n    }\n    /**\n     * Writes `data` to the `stdin`.\n     *\n     * @param data The message to write, either a string or a byte array.\n     * @example\n     * ```typescript\n     * import { Command } from '@tauri-apps/plugin-shell';\n     * const command = Command.create('node');\n     * const child = await command.spawn();\n     * await child.write('message');\n     * await child.write([0, 1, 2, 3, 4, 5]);\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     *\n     * @since 2.0.0\n     */\n    async write(data) {\n        await (0,_tauri_apps_api_core__WEBPACK_IMPORTED_MODULE_0__.invoke)('plugin:shell|stdin_write', {\n            pid: this.pid,\n            buffer: data\n        });\n    }\n    /**\n     * Kills the child process.\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     *\n     * @since 2.0.0\n     */\n    async kill() {\n        await (0,_tauri_apps_api_core__WEBPACK_IMPORTED_MODULE_0__.invoke)('plugin:shell|kill', {\n            cmd: 'killChild',\n            pid: this.pid\n        });\n    }\n}\n/**\n * The entry point for spawning child processes.\n * It emits the `close` and `error` events.\n * @example\n * ```typescript\n * import { Command } from '@tauri-apps/plugin-shell';\n * const command = Command.create('node');\n * command.on('close', data => {\n *   console.log(`command finished with code ${data.code} and signal ${data.signal}`)\n * });\n * command.on('error', error => console.error(`command error: \"${error}\"`));\n * command.stdout.on('data', line => console.log(`command stdout: \"${line}\"`));\n * command.stderr.on('data', line => console.log(`command stderr: \"${line}\"`));\n *\n * const child = await command.spawn();\n * console.log('pid:', child.pid);\n * ```\n *\n * @since 2.0.0\n *\n */\nclass Command extends EventEmitter {\n    /**\n     * @ignore\n     * Creates a new `Command` instance.\n     *\n     * @param program The program name to execute.\n     * It must be configured on `tauri.conf.json > plugins > shell > scope`.\n     * @param args Program arguments.\n     * @param options Spawn options.\n     */\n    constructor(program, args = [], options) {\n        super();\n        /** Event emitter for the `stdout`. Emits the `data` event. */\n        this.stdout = new EventEmitter();\n        /** Event emitter for the `stderr`. Emits the `data` event. */\n        this.stderr = new EventEmitter();\n        this.program = program;\n        this.args = typeof args === 'string' ? [args] : args;\n        this.options = options ?? {};\n    }\n    /**\n     * Creates a command to execute the given program.\n     * @example\n     * ```typescript\n     * import { Command } from '@tauri-apps/plugin-shell';\n     * const command = Command.create('my-app', ['run', 'tauri']);\n     * const output = await command.execute();\n     * ```\n     *\n     * @param program The program to execute.\n     * It must be configured on `tauri.conf.json > plugins > shell > scope`.\n     */\n    static create(program, args = [], options) {\n        return new Command(program, args, options);\n    }\n    /**\n     * Creates a command to execute the given sidecar program.\n     * @example\n     * ```typescript\n     * import { Command } from '@tauri-apps/plugin-shell';\n     * const command = Command.sidecar('my-sidecar');\n     * const output = await command.execute();\n     * ```\n     *\n     * @param program The program to execute.\n     * It must be configured on `tauri.conf.json > plugins > shell > scope`.\n     */\n    static sidecar(program, args = [], options) {\n        const instance = new Command(program, args, options);\n        instance.options.sidecar = true;\n        return instance;\n    }\n    /**\n     * Executes the command as a child process, returning a handle to it.\n     *\n     * @returns A promise resolving to the child process handle.\n     *\n     * @since 2.0.0\n     */\n    async spawn() {\n        const program = this.program;\n        const args = this.args;\n        const options = this.options;\n        if (typeof args === 'object') {\n            Object.freeze(args);\n        }\n        const onEvent = new _tauri_apps_api_core__WEBPACK_IMPORTED_MODULE_0__.Channel();\n        onEvent.onmessage = (event) => {\n            switch (event.event) {\n                case 'Error':\n                    this.emit('error', event.payload);\n                    break;\n                case 'Terminated':\n                    this.emit('close', event.payload);\n                    break;\n                case 'Stdout':\n                    this.stdout.emit('data', event.payload);\n                    break;\n                case 'Stderr':\n                    this.stderr.emit('data', event.payload);\n                    break;\n            }\n        };\n        return await (0,_tauri_apps_api_core__WEBPACK_IMPORTED_MODULE_0__.invoke)('plugin:shell|spawn', {\n            program,\n            args,\n            options,\n            onEvent\n        }).then((pid) => new Child(pid));\n    }\n    /**\n     * Executes the command as a child process, waiting for it to finish and collecting all of its output.\n     * @example\n     * ```typescript\n     * import { Command } from '@tauri-apps/plugin-shell';\n     * const output = await Command.create('echo', 'message').execute();\n     * assert(output.code === 0);\n     * assert(output.signal === null);\n     * assert(output.stdout === 'message');\n     * assert(output.stderr === '');\n     * ```\n     *\n     * @returns A promise resolving to the child process output.\n     *\n     * @since 2.0.0\n     */\n    async execute() {\n        const program = this.program;\n        const args = this.args;\n        const options = this.options;\n        if (typeof args === 'object') {\n            Object.freeze(args);\n        }\n        return await (0,_tauri_apps_api_core__WEBPACK_IMPORTED_MODULE_0__.invoke)('plugin:shell|execute', {\n            program,\n            args,\n            options\n        });\n    }\n}\n/**\n * Opens a path or URL with the system's default app,\n * or the one specified with `openWith`.\n *\n * The `openWith` value must be one of `firefox`, `google chrome`, `chromium` `safari`,\n * `open`, `start`, `xdg-open`, `gio`, `gnome-open`, `kde-open` or `wslview`.\n *\n * @example\n * ```typescript\n * import { open } from '@tauri-apps/plugin-shell';\n * // opens the given URL on the default browser:\n * await open('https://github.com/tauri-apps/tauri');\n * // opens the given URL using `firefox`:\n * await open('https://github.com/tauri-apps/tauri', 'firefox');\n * // opens a file using the default program:\n * await open('/path/to/file');\n * ```\n *\n * @param path The path or URL to open.\n * This value is matched against the string regex defined on `tauri.conf.json > plugins > shell > open`,\n * which defaults to `^((mailto:\\w+)|(tel:\\w+)|(https?://\\w+)).+`.\n * @param openWith The app to open the file or URL with.\n * Defaults to the system default application for the specified path type.\n *\n * @since 2.0.0\n */\nasync function open(path, openWith) {\n    await (0,_tauri_apps_api_core__WEBPACK_IMPORTED_MODULE_0__.invoke)('plugin:shell|open', {\n        path,\n        with: openWith\n    });\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tauri-apps/plugin-shell/dist-js/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tauri-apps/plugin-store/dist-js/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@tauri-apps/plugin-store/dist-js/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LazyStore: () => (/* binding */ LazyStore),\n/* harmony export */   Store: () => (/* binding */ Store),\n/* harmony export */   getStore: () => (/* binding */ getStore),\n/* harmony export */   load: () => (/* binding */ load)\n/* harmony export */ });\n/* harmony import */ var _tauri_apps_api_event__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tauri-apps/api/event */ \"(ssr)/./node_modules/@tauri-apps/api/event.js\");\n/* harmony import */ var _tauri_apps_api_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tauri-apps/api/core */ \"(ssr)/./node_modules/@tauri-apps/api/core.js\");\n\n\n\n// Copyright 2019-2023 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * Create a new Store or load the existing store with the path.\n *\n * @example\n * ```typescript\n * import { Store } from '@tauri-apps/api/store';\n * const store = await Store.load('store.json');\n * ```\n *\n * @param path Path to save the store in `app_data_dir`\n * @param options Store configuration options\n */\nasync function load(path, options) {\n    return await Store.load(path, options);\n}\n/**\n * Gets an already loaded store.\n *\n * If the store is not loaded, returns `null`. In this case you must {@link Store.load load} it.\n *\n * This function is more useful when you already know the store is loaded\n * and just need to access its instance. Prefer {@link Store.load} otherwise.\n *\n * @example\n * ```typescript\n * import { getStore } from '@tauri-apps/api/store';\n * const store = await getStore('store.json');\n * ```\n *\n * @param path Path of the store.\n */\nasync function getStore(path) {\n    return await Store.get(path);\n}\n/**\n * A lazy loaded key-value store persisted by the backend layer.\n */\nclass LazyStore {\n    get store() {\n        if (!this._store) {\n            this._store = load(this.path, this.options);\n        }\n        return this._store;\n    }\n    /**\n     * Note that the options are not applied if someone else already created the store\n     * @param path Path to save the store in `app_data_dir`\n     * @param options Store configuration options\n     */\n    constructor(path, options) {\n        this.path = path;\n        this.options = options;\n    }\n    /**\n     * Init/load the store if it's not loaded already\n     */\n    async init() {\n        await this.store;\n    }\n    async set(key, value) {\n        return (await this.store).set(key, value);\n    }\n    async get(key) {\n        return (await this.store).get(key);\n    }\n    async has(key) {\n        return (await this.store).has(key);\n    }\n    async delete(key) {\n        return (await this.store).delete(key);\n    }\n    async clear() {\n        await (await this.store).clear();\n    }\n    async reset() {\n        await (await this.store).reset();\n    }\n    async keys() {\n        return (await this.store).keys();\n    }\n    async values() {\n        return (await this.store).values();\n    }\n    async entries() {\n        return (await this.store).entries();\n    }\n    async length() {\n        return (await this.store).length();\n    }\n    async reload() {\n        await (await this.store).reload();\n    }\n    async save() {\n        await (await this.store).save();\n    }\n    async onKeyChange(key, cb) {\n        return (await this.store).onKeyChange(key, cb);\n    }\n    async onChange(cb) {\n        return (await this.store).onChange(cb);\n    }\n    async close() {\n        if (this._store) {\n            await (await this._store).close();\n        }\n    }\n}\n/**\n * A key-value store persisted by the backend layer.\n */\nclass Store extends _tauri_apps_api_core__WEBPACK_IMPORTED_MODULE_1__.Resource {\n    constructor(rid) {\n        super(rid);\n    }\n    /**\n     * Create a new Store or load the existing store with the path.\n     *\n     * @example\n     * ```typescript\n     * import { Store } from '@tauri-apps/api/store';\n     * const store = await Store.load('store.json');\n     * ```\n     *\n     * @param path Path to save the store in `app_data_dir`\n     * @param options Store configuration options\n     */\n    static async load(path, options) {\n        const rid = await (0,_tauri_apps_api_core__WEBPACK_IMPORTED_MODULE_1__.invoke)('plugin:store|load', {\n            path,\n            ...options\n        });\n        return new Store(rid);\n    }\n    /**\n     * Gets an already loaded store.\n     *\n     * If the store is not loaded, returns `null`. In this case you must {@link Store.load load} it.\n     *\n     * This function is more useful when you already know the store is loaded\n     * and just need to access its instance. Prefer {@link Store.load} otherwise.\n     *\n     * @example\n     * ```typescript\n     * import { Store } from '@tauri-apps/api/store';\n     * let store = await Store.get('store.json');\n     * if (!store) {\n     *   store = await Store.load('store.json');\n     * }\n     * ```\n     *\n     * @param path Path of the store.\n     */\n    static async get(path) {\n        return await (0,_tauri_apps_api_core__WEBPACK_IMPORTED_MODULE_1__.invoke)('plugin:store|get_store', { path }).then((rid) => (rid ? new Store(rid) : null));\n    }\n    async set(key, value) {\n        await (0,_tauri_apps_api_core__WEBPACK_IMPORTED_MODULE_1__.invoke)('plugin:store|set', {\n            rid: this.rid,\n            key,\n            value\n        });\n    }\n    async get(key) {\n        const [value, exists] = await (0,_tauri_apps_api_core__WEBPACK_IMPORTED_MODULE_1__.invoke)('plugin:store|get', {\n            rid: this.rid,\n            key\n        });\n        return exists ? value : undefined;\n    }\n    async has(key) {\n        return await (0,_tauri_apps_api_core__WEBPACK_IMPORTED_MODULE_1__.invoke)('plugin:store|has', {\n            rid: this.rid,\n            key\n        });\n    }\n    async delete(key) {\n        return await (0,_tauri_apps_api_core__WEBPACK_IMPORTED_MODULE_1__.invoke)('plugin:store|delete', {\n            rid: this.rid,\n            key\n        });\n    }\n    async clear() {\n        await (0,_tauri_apps_api_core__WEBPACK_IMPORTED_MODULE_1__.invoke)('plugin:store|clear', { rid: this.rid });\n    }\n    async reset() {\n        await (0,_tauri_apps_api_core__WEBPACK_IMPORTED_MODULE_1__.invoke)('plugin:store|reset', { rid: this.rid });\n    }\n    async keys() {\n        return await (0,_tauri_apps_api_core__WEBPACK_IMPORTED_MODULE_1__.invoke)('plugin:store|keys', { rid: this.rid });\n    }\n    async values() {\n        return await (0,_tauri_apps_api_core__WEBPACK_IMPORTED_MODULE_1__.invoke)('plugin:store|values', { rid: this.rid });\n    }\n    async entries() {\n        return await (0,_tauri_apps_api_core__WEBPACK_IMPORTED_MODULE_1__.invoke)('plugin:store|entries', { rid: this.rid });\n    }\n    async length() {\n        return await (0,_tauri_apps_api_core__WEBPACK_IMPORTED_MODULE_1__.invoke)('plugin:store|length', { rid: this.rid });\n    }\n    async reload() {\n        await (0,_tauri_apps_api_core__WEBPACK_IMPORTED_MODULE_1__.invoke)('plugin:store|reload', { rid: this.rid });\n    }\n    async save() {\n        await (0,_tauri_apps_api_core__WEBPACK_IMPORTED_MODULE_1__.invoke)('plugin:store|save', { rid: this.rid });\n    }\n    async onKeyChange(key, cb) {\n        return await (0,_tauri_apps_api_event__WEBPACK_IMPORTED_MODULE_0__.listen)('store://change', (event) => {\n            if (event.payload.resourceId === this.rid && event.payload.key === key) {\n                cb(event.payload.exists ? event.payload.value : undefined);\n            }\n        });\n    }\n    async onChange(cb) {\n        return await (0,_tauri_apps_api_event__WEBPACK_IMPORTED_MODULE_0__.listen)('store://change', (event) => {\n            if (event.payload.resourceId === this.rid) {\n                cb(event.payload.key, event.payload.exists ? event.payload.value : undefined);\n            }\n        });\n    }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tauri-apps/plugin-store/dist-js/index.js\n");

/***/ })

};
;